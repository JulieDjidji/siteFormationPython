<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python site</title>
    <link>https://JulieDjidji.github.io/</link>
    <description>Recent content on Python site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 15:26:15 +0000</lastBuildDate>
    
	<atom:link href="https://JulieDjidji.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation en local</title>
      <link>https://JulieDjidji.github.io/getting-started/installation/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/getting-started/installation/</guid>
      <description>Pour installer python en local sur son ordinateur, nous vous conseillons d&amp;rsquo;installer la distribution anaconda disponible sur le site d&amp;rsquo;Anaconda.
 Sous Windows, il suffit de télécharger l&amp;rsquo;exécutable puis de l&amp;rsquo;exécuter. Le site vous détaille par exemple la procédure à suivre. Sous Linux, le tutoriel permet par exemple d&amp;rsquo;installer anaconda.  Mais qu&amp;rsquo;est ce qu&amp;rsquo;anaconda ? Anaconda est une distribution Python. A son installation, Anaconda installe par défaut :</description>
    </item>
    
    <item>
      <title>Les principaux types de données : entiers, flottants, chaînes de caractère</title>
      <link>https://JulieDjidji.github.io/explorer/chapter3/1/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter3/1/</guid>
      <description>Exercice 1 : afficher le type de x pour x=3, x=&amp;ldquo;test&amp;rdquo; et x=3.5
Exercice 2 : Concaténer les chaînes de caractères suivantes &amp;ldquo;Les deux formateurs sont : &amp;ldquo;, &amp;ldquo;Julie&amp;rdquo;, &amp;ldquo; et &amp;ldquo;, &amp;ldquo;Laurent&amp;rdquo;
Exercice 3 : Compter le nombre de fois où la lettre e est présente dans la chaîne &amp;ldquo;Je fais un comptage des e.&amp;rdquo;
Exercice 4 : Repérer la première position où la lettre e est présente dans la chaîne &amp;ldquo;Je fais un comptage des e.</description>
    </item>
    
    <item>
      <title>Les principaux types de données : entiers, flottants, chaînes de caractère</title>
      <link>https://JulieDjidji.github.io/fondations/chapter3/1-typessimples/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter3/1-typessimples/</guid>
      <description>Quelques exercices de manipulation Exercice 1 : afficher le type de x pour x=3, x=&amp;ldquo;test&amp;rdquo; et x=3.5
Exercice 2 : Concaténer les chaînes de caractères suivantes &amp;ldquo;Les deux formateurs sont : &amp;ldquo;, &amp;ldquo;Julie&amp;rdquo;, &amp;ldquo; et &amp;ldquo;, &amp;ldquo;Laurent&amp;rdquo;
Exercice 3 : Compter le nombre de fois où la lettre e est présente dans la chaîne &amp;ldquo;Je fais un comptage des e.&amp;rdquo;
Exercice 4 : Repérer la première position où la lettre e est présente dans la chaîne &amp;ldquo;Je fais un comptage des e.</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>https://JulieDjidji.github.io/hello_world/</link>
      <pubDate>Tue, 17 Oct 2017 14:00:45 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/hello_world/</guid>
      <description>Hello world!</description>
    </item>
    
    <item>
      <title>Le premier objet python : les listes</title>
      <link>https://JulieDjidji.github.io/explorer/chapter3/2/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter3/2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Le premier objet python : les listes</title>
      <link>https://JulieDjidji.github.io/fondations/chapter3/2-listes/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter3/2-listes/</guid>
      <description>Création et manipulation d&amp;rsquo;une liste    Action Fonction python     Creation d&amp;rsquo;une liste [] ou list()   Test de la présence d&amp;rsquo;un élément dans une liste x in liste   Accès à un élément liste[i]   Accès à plusieurs éléments liste[i:j]   Minimum de la liste min(liste)   Maximum de la liste max(liste)   Nombre d&amp;rsquo;éléments d&amp;rsquo;une liste len(liste)   Nombre d’occurrence de l&amp;rsquo;élément x dans la liste liste.</description>
    </item>
    
    <item>
      <title>Utiliser python à l’Insee</title>
      <link>https://JulieDjidji.github.io/getting-started/configuration/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/getting-started/configuration/</guid>
      <description>En interne à l&amp;rsquo;interne, la plateforme innovation permet d&amp;rsquo;obtenir python en un clic. Pour cela, il suffit de :
 aller sur Onyxia se connecter (bouton login en haut à droite) ouvrir le catalogue, sélectionner jupyter et déployer le service (schéma ci-dessous) il est possible d&amp;rsquo;activer la configuration Git (onglet Git) cliquer finalement sur l&amp;rsquo;icone Créer le service  </description>
    </item>
    
    <item>
      <title>Les dictionnaires</title>
      <link>https://JulieDjidji.github.io/explorer/chapter3/3/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter3/3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Les dictionnaires</title>
      <link>https://JulieDjidji.github.io/fondations/chapter3/3-dictionnaires/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter3/3-dictionnaires/</guid>
      <description>Mettre en évidence l&amp;rsquo;intérêt du package pprint</description>
    </item>
    
    <item>
      <title>Mais quelle version de python, ai-je installé ?</title>
      <link>https://JulieDjidji.github.io/getting-started/versioninstallee/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/getting-started/versioninstallee/</guid>
      <description>import sys print(sys.version)  3.7.1 (default, Dec 14 2018, 19:28:38) [GCC 7.3.0]  </description>
    </item>
    
    <item>
      <title>Les sets</title>
      <link>https://JulieDjidji.github.io/explorer/chapter3/4/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter3/4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Les sets</title>
      <link>https://JulieDjidji.github.io/fondations/chapter3/4-sets/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter3/4-sets/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Les tuples</title>
      <link>https://JulieDjidji.github.io/explorer/chapter3/5/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter3/5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Les tuples</title>
      <link>https://JulieDjidji.github.io/fondations/chapter3/5-tuples/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter3/5-tuples/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1 - Les fonctions</title>
      <link>https://JulieDjidji.github.io/explorer/chapter1/1/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter1/1/</guid>
      <description>Pour comprendre l&amp;rsquo;indentation, prenons l&amp;rsquo;exemple des fonctions. Pour écrire sa propre fonction, il faut respecter les conventions suivantes :
 il faut définir la fonction avec le terme def et la ligne contenant cette instruction se termine par un deux-points selon ce modèle : def nomFonction(arg1, &amp;hellip;): des parenthèses après le nom de la fonction contiennent les paramètres de la fonction. En cas d&amp;rsquo;absence de paramètres, les parenthèses restent vides. il n&amp;rsquo;y a pas de contrainte sur le nom des fonctions, à l&amp;rsquo;exception de mots ayant déjà une signification (par exemple, list correspond déjà à une fonction python).</description>
    </item>
    
    <item>
      <title>1 - Les fonctions</title>
      <link>https://JulieDjidji.github.io/fondations/chapter1/1-fonctions/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter1/1-fonctions/</guid>
      <description>Pour comprendre l&amp;rsquo;indentation, prenons l&amp;rsquo;exemple des fonctions. Pour écrire sa propre fonction, il faut respecter les conventions suivantes :
 il faut définir la fonction avec le terme def et la ligne contenant cette instruction se termine par un deux-points selon ce modèle : def nomFonction(arg1, &amp;hellip;): des parenthèses après le nom de la fonction contiennent les paramètres de la fonction. En cas d&amp;rsquo;absence de paramètres, les parenthèses restent vides. il n&amp;rsquo;y a pas de contrainte sur le nom des fonctions, à l&amp;rsquo;exception de mots ayant déjà une signification (par exemple, list correspond déjà à une fonction python).</description>
    </item>
    
    <item>
      <title>2 - Les conditions if - elif - else</title>
      <link>https://JulieDjidji.github.io/explorer/chapter1/2/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter1/2/</guid>
      <description>Comme dans les autres langages de programmation, des conditions peuvent être effectuées en python en utilisant if-elif-else. Les instructions elif et else sont évidemment facultatives. Comme pour les fonctions, chaque ligne associée à une condition se termine par un deux-points. La notation habituelle de ces conditions est :
if condition1: Bloc d&#39;instruction elif condition2: Bloc d&#39;instruction else : Bloc d&#39;instruction  Une condition correspond à un booléen. La condition x==2 vaut True et est donc respectée seulement si x est effectivement égal à 2 sinon elle vaut False et le bloc d&amp;rsquo;instruction associée à cette condition n&amp;rsquo;est pas exécuté.</description>
    </item>
    
    <item>
      <title>2 - Les conditions if - elif - else</title>
      <link>https://JulieDjidji.github.io/fondations/chapter1/2-ifthenelse/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter1/2-ifthenelse/</guid>
      <description>Comme dans les autres langages de programmation, des conditions peuvent être effectuées en python en utilisant if-elif-else. Les instructions elif et else sont évidemment facultatives. Comme pour les fonctions, chaque ligne associée à une condition se termine par un deux-points. La notation habituelle de ces conditions est :
if condition1: Bloc d&#39;instruction elif condition2: Bloc d&#39;instruction else : Bloc d&#39;instruction  Une condition correspond à un booléen. La condition x==2 vaut True et est donc respectée seulement si x est effectivement égal à 2 sinon elle vaut False et le bloc d&amp;rsquo;instruction associée à cette condition n&amp;rsquo;est pas exécuté.</description>
    </item>
    
    <item>
      <title>3 - Les boucles</title>
      <link>https://JulieDjidji.github.io/explorer/chapter1/3/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter1/3/</guid>
      <description>Boucle for Difficile d&amp;rsquo;aborder les boucles sans évoquer les listes. Pas de panique, on reviendra plus loin sur la manipulation des listes. Prenons pour l&amp;rsquo;instant une liste [0,1,2,3,4,5]. Ecrivons une première boucle for qui à chaque valeur de la liste, affiche son carré.
for n in [0,1,2,3,4,5]: print(n**2, &#39; &#39;, end=&#39;&#39;)  0 1 4 9 16 25  Exemple: écrire une boucle qui pour les valeurs de 0 à 10 affiche un message qui indique si la valeur est paire ou impaire.</description>
    </item>
    
    <item>
      <title>3 - Les boucles</title>
      <link>https://JulieDjidji.github.io/fondations/chapter1/3-boucles/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter1/3-boucles/</guid>
      <description>Boucle for Difficile d&amp;rsquo;aborder les boucles sans évoquer a minima les listes. Pas de panique, on reviendra plus loin sur la manipulation des listes. Prenons pour l&amp;rsquo;instant une liste [0,1,2,3,4,5]. Ecrivons une première boucle for qui à chaque valeur de la liste, affiche son carré.
for n in [0,1,2,3,4,5]: print(n**2, &#39; &#39;, end=&#39;&#39;)  0 1 4 9 16 25  Exemple: écrire une boucle qui pour les valeurs de 0 à 10 affiche un message qui indique si la valeur est paire ou impaire.</description>
    </item>
    
    <item>
      <title>4 - Contrôler ses codes en termes de mémoire et de temps d&#39;exécution</title>
      <link>https://JulieDjidji.github.io/fondations/chapter1/4-occupationm%C3%A9moire/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/fondations/chapter1/4-occupationm%C3%A9moire/</guid>
      <description> Timer son code  Avec time Avec timeit  https://stackoverflow.com/questions/17579357/time-time-vs-timeit-timeit https://www.pythoncentral.io/measure-time-in-python-time-time-vs-time-clock/
L&amp;rsquo;occupation mémoire lors du lancement d&amp;rsquo;un script (profiler - mprof)  http://www.xavierdupre.fr/app/ensae_teaching_cs/helpsphinx/notebooks/profiling_example.html https://jakevdp.github.io/PythonDataScienceHandbook/01.07-timing-and-profiling.html  </description>
    </item>
    
    <item>
      <title>4 - Debugger</title>
      <link>https://JulieDjidji.github.io/explorer/chapter1/4/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/explorer/chapter1/4/</guid>
      <description>Blabla</description>
    </item>
    
    <item>
      <title>Références python</title>
      <link>https://JulieDjidji.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://JulieDjidji.github.io/about/</guid>
      <description>Voici quelques moocs intéressants pour compléter :
 L&amp;rsquo;incontournable d&amp;rsquo;Openclassroom : Apprenez à programmer en Python Un mooc dans un format plus traditionnel (mettre la référence) A compléter &amp;hellip;  N&amp;rsquo;hésitez pas à nous indiquer si vous trouvez d&amp;rsquo;autres tutoriels pertinents !</description>
    </item>
    
  </channel>
</rss>